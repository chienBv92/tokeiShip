@using ShipOnline.Resources;
@using ShipOnline.Models.Entity;
@using ShipOnline.Models.Define;

@{
    ViewBag.Title = UserLabel.lblLogin;
    Layout = "~/Views/Layout/_LayoutMain.cshtml";
    bool timeOut = false;
    try
    {
        if (ViewBag.TimeOut != null)
        {
            timeOut = ViewBag.TimeOut;
        }
    }
    catch (Exception)
    {
    }
}
@model UserAccountModel

<div class="background-top"></div>
<div id="Userlogin">
    @using (Html.BeginForm("ResetPassword", "UserAccount", FormMethod.Post, new { @id = "ResetForm", @class = "horizontal" }))
    {
        <div class="form-group">
            <div class="title" id="title">@UserLabel.lblResetPassword</div>
            @Html.ValidationSummary(false)
            
        </div>
        if (ViewBag.sendMailSuccess != null)
        {
            <span style="margin-left:55px">@ViewBag.sendMailSuccess</span>
        }
        <div class="Content">
            <div class="form-group">
                <label class="title-row">@AdminLabel.lblEmail <span class="RequiredField">*</span></label>
                @Html.TextBoxFor(m => m.USER_EMAIL, new { @class = "txt-w-250", maxlength = 100, autocomplete = "off" })
            </div>

            <div class="form-group  margin-left-6" style="margin-bottom: 20px">
                @Html.AntiForgeryToken()
                <button type="button" id="btnReset" name="btnReset" class="btn btn-green">@UserLabel.btnResetPassword</button>
            </div>
        </div>

    }

</div>
<script>
    $(function () {
        ShipOnline.utility.validFullHalfSize($("#USER_EMAIL"));
        ShipOnline.utility.imeControl($("#USER_EMAIL"), 'disable');
    })

    // Validate data Login
    function validateData() {
        var invalidMess = [];
        var userEmail = $('#USER_EMAIL').val();

        if (userEmail == null || userEmail.trim() == "") { // required content
            errDisplay = '@AdminLabel.lblEmail' + Constant.ERR_REQUIRED;
            invalidMess.push(errDisplay);
        }
        else if (userEmail.trim().length > 100) {
            invalidMess.push("@string.Format(Message.CheckMaxLength, @AdminLabel.lblEmail, Constant.MAX_EMAIL_LENGTH)");
        }
            // check numberic
        else if (!ShipOnline.utility.validEmail(userEmail)) {
            invalidMess.push("@string.Format(@Message.IncorrectFormat, @AdminLabel.lblEmail)");
        }

        return invalidMess;

    }

    // Click  login
    $(document).off('#btnReset');
    $(document).on('click', '#btnReset', function () {
        //var result = iseiQ.utility.getDataByAjax(checkTimeOutUrl, null);
        //if (!result) return;
        $('.validation-summary-errors').remove();
        var invalidMess = validateData();

        if (invalidMess.length > 0) {
            ShipOnline.utility.showClientError(invalidMess);
            return false;
        }

        var userEmail = $('#USER_EMAIL').val();

        var paramCheckExist = {
            userEmail: userEmail
        };

        var data = ShipOnline.utility.getDataByAjax('@Url.Action("CheckExistUserAccount", "AdminManageUser")', paramCheckExist);
        if (typeof (data) != 'undefined' || data != null) {
            existUser = data.exist;
        }

        if (!existUser) {
            ShipOnline.utility.showMessageModal('@Message.msgEmailNotExist', true);
            return false;
        } else {
            $("#ResetForm").submit();
        }
    })

</script>

<style>
    #title {
        text-align: center;
        font-size: 18px;
        font-weight: bold;
    }

    #btnReset {
        text-align: center;
        margin-left: 200px;
    }
</style>